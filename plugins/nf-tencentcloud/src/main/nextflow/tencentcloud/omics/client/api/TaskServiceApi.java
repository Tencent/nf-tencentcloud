/*
 * Task Execution Service
 * ## Executive Summary The Task Execution Service (TES) API is a standardized schema and API for describing and executing batch execution tasks. A task defines a set of input files, a set of containers and commands to run, a set of output files and some other logging and metadata.  TES servers accept task documents and execute them asynchronously on available compute resources. A TES server could be built on top of a traditional HPC queuing system, such as Grid Engine, Slurm or cloud style compute systems such as AWS Batch or Kubernetes. ## Introduction This document describes the TES API and provides details on the specific endpoints, request formats, and responses. It is intended to provide key information for developers of TES-compatible services as well as clients that will call these TES services. Use cases include:    - Deploying existing workflow engines on new infrastructure. Workflow engines   such as CWL-Tes and Cromwell have extentions for using TES. This will allow   a system engineer to deploy them onto a new infrastructure using a job scheduling   system not previously supported by the engine.    - Developing a custom workflow management system. This API provides a common   interface to asynchronous batch processing capabilities. A developer can write   new tools against this interface and expect them to work using a variety of   backend solutions that all support the same specification.   ## Standards The TES API specification is written in OpenAPI and embodies a RESTful service philosophy. It uses JSON in requests and responses and standard HTTP/HTTPS for information transport. HTTPS should be used rather than plain HTTP except for testing or internal-only purposes. ### Authentication and Authorization Is is envisaged that most TES API instances will require users to authenticate to use the endpoints. However, the decision if authentication is required should be taken by TES API implementers.  If authentication is required, we recommend that TES implementations use an OAuth2  bearer token, although they can choose other mechanisms if appropriate.  Checking that a user is authorized to submit TES requests is a responsibility of TES implementations. ### CORS If TES API implementation is to be used by another website or domain it must implement Cross Origin Resource Sharing (CORS). Please refer to https://w3id.org/ga4gh/product-approval-support/cors for more information about GA4GHâ€™s recommendations and how to implement CORS. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package nextflow.tencentcloud.omics.client.api;

import nextflow.tencentcloud.omics.client.ApiCallback;
import nextflow.tencentcloud.omics.client.ApiClient;
import nextflow.tencentcloud.omics.client.ApiException;
import nextflow.tencentcloud.omics.client.ApiResponse;
import nextflow.tencentcloud.omics.client.Configuration;
import nextflow.tencentcloud.omics.client.Pair;
import nextflow.tencentcloud.omics.client.ProgressRequestBody;
import nextflow.tencentcloud.omics.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import nextflow.tencentcloud.omics.client.model.TesCancelTaskResponse;
import nextflow.tencentcloud.omics.client.model.TesCreateTaskResponse;
import nextflow.tencentcloud.omics.client.model.TesListTasksResponse;
import nextflow.tencentcloud.omics.client.model.TesServiceInfo;
import nextflow.tencentcloud.omics.client.model.TesState;
import nextflow.tencentcloud.omics.client.model.TesTask;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskServiceApi {
    private ApiClient apiClient;
    private String[] localVarAuthNames = new String[] {  };

    public TaskServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelTask
     * @param id ID of task to be canceled. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelTaskCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tasks/{id}:cancel"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

//        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelTaskValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelTask(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelTaskCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * CancelTask
     * Cancel a task based on providing an exact task ID.
     * @param id ID of task to be canceled. (required)
     * @return TesCancelTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TesCancelTaskResponse cancelTask(String id) throws ApiException {
        ApiResponse<TesCancelTaskResponse> resp = cancelTaskWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * CancelTask
     * Cancel a task based on providing an exact task ID.
     * @param id ID of task to be canceled. (required)
     * @return ApiResponse&lt;TesCancelTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TesCancelTaskResponse> cancelTaskWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = cancelTaskValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TesCancelTaskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * CancelTask (asynchronously)
     * Cancel a task based on providing an exact task ID.
     * @param id ID of task to be canceled. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelTaskAsync(String id, final ApiCallback<TesCancelTaskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelTaskValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TesCancelTaskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTask
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTaskCall(TesTask body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

//        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTaskValidateBeforeCall(TesTask body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTask(Async)");
        }
        
        com.squareup.okhttp.Call call = createTaskCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * CreateTask
     * Create a new task. The user provides a Task document, which the server uses as a basis and adds additional fields.
     * @param body  (required)
     * @return TesCreateTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TesCreateTaskResponse createTask(TesTask body) throws ApiException {
        ApiResponse<TesCreateTaskResponse> resp = createTaskWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * CreateTask
     * Create a new task. The user provides a Task document, which the server uses as a basis and adds additional fields.
     * @param body  (required)
     * @return ApiResponse&lt;TesCreateTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TesCreateTaskResponse> createTaskWithHttpInfo(TesTask body) throws ApiException {
        com.squareup.okhttp.Call call = createTaskValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TesCreateTaskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * CreateTask (asynchronously)
     * Create a new task. The user provides a Task document, which the server uses as a basis and adds additional fields.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskAsync(TesTask body, final ApiCallback<TesCreateTaskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TesCreateTaskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/service-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

//        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getServiceInfoCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GetServiceInfo
     * Provides information about the service, this structure is based on the standardized GA4GH service info structure. In addition, this endpoint will also provide information about customized storage endpoints offered by the TES server.
     * @return TesServiceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TesServiceInfo getServiceInfo() throws ApiException {
        ApiResponse<TesServiceInfo> resp = getServiceInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * GetServiceInfo
     * Provides information about the service, this structure is based on the standardized GA4GH service info structure. In addition, this endpoint will also provide information about customized storage endpoints offered by the TES server.
     * @return ApiResponse&lt;TesServiceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TesServiceInfo> getServiceInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getServiceInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TesServiceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetServiceInfo (asynchronously)
     * Provides information about the service, this structure is based on the standardized GA4GH service info structure. In addition, this endpoint will also provide information about customized storage endpoints offered by the TES server.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInfoAsync(final ApiCallback<TesServiceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TesServiceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTask
     * @param id ID of task to retrieve. (required)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskCall(String id, String view, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tasks/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (view != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("view", view));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

//        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskValidateBeforeCall(String id, String view, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTask(Async)");
        }
        
        com.squareup.okhttp.Call call = getTaskCall(id, view, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GetTask
     * Get a single task, based on providing the exact task ID string.
     * @param id ID of task to retrieve. (required)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @return TesTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TesTask getTask(String id, String view) throws ApiException {
        ApiResponse<TesTask> resp = getTaskWithHttpInfo(id, view);
        return resp.getData();
    }

    /**
     * GetTask
     * Get a single task, based on providing the exact task ID string.
     * @param id ID of task to retrieve. (required)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @return ApiResponse&lt;TesTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TesTask> getTaskWithHttpInfo(String id, String view) throws ApiException {
        com.squareup.okhttp.Call call = getTaskValidateBeforeCall(id, view, null, null);
        Type localVarReturnType = new TypeToken<TesTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetTask (asynchronously)
     * Get a single task, based on providing the exact task ID string.
     * @param id ID of task to retrieve. (required)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskAsync(String id, String view, final ApiCallback<TesTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskValidateBeforeCall(id, view, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TesTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTasks
     * @param namePrefix OPTIONAL. Filter the list to include tasks where the name matches this prefix. If unspecified, no task name filtering is done. (optional)
     * @param state OPTIONAL. Filter tasks by state. If unspecified, no task state filtering is done. (optional)
     * @param tagKey OPTIONAL. Provide key tag to filter. The field tag_key is an array of key values, and will be zipped with an optional tag_value array. So the query: &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1&amp;tag_value&#x3D;bar1&amp;tag_key&#x3D;foo2&amp;tag_value&#x3D;bar2 &#x60;&#x60;&#x60; Should be constructed into the structure { \&quot;foo1\&quot; : \&quot;bar1\&quot;, \&quot;foo2\&quot; : \&quot;bar2\&quot;}  &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1 &#x60;&#x60;&#x60; Should be constructed into the structure {\&quot;foo1\&quot; : \&quot;\&quot;}  If the tag_value is empty, it will be treated as matching any possible value. If a tag value is provided, both the tag&#x27;s key and value must be exact matches for a task to be returned. Filter                            Tags                          Match? ---------------------------------------------------------------------- {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bat\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;\&quot;}                   Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;\&quot;}                       {}                            No (optional)
     * @param tagValue OPTIONAL. The companion value field for tag_key (optional)
     * @param pageSize Optional number of tasks to return in one page. Must be less than 2048. Defaults to 256. (optional)
     * @param pageToken OPTIONAL. Page token is used to retrieve the next page of results. If unspecified, returns the first page of results. The value can be found in the &#x60;next_page_token&#x60; field of the last returned result of ListTasks (optional)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTasksCall(String namePrefix, TesState state, List<String> tagKey, List<String> tagValue, Integer pageSize, String pageToken, String view, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (namePrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name_prefix", namePrefix));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (tagKey != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tag_key", tagKey));
        if (tagValue != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tag_value", tagValue));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_token", pageToken));
        if (view != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("view", view));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

//        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTasksValidateBeforeCall(String namePrefix, TesState state, List<String> tagKey, List<String> tagValue, Integer pageSize, String pageToken, String view, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTasksCall(namePrefix, state, tagKey, tagValue, pageSize, pageToken, view, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * ListTasks
     * List tasks tracked by the TES server. This includes queued, active and completed tasks. How long completed tasks are stored by the system may be dependent on the underlying implementation.
     * @param namePrefix OPTIONAL. Filter the list to include tasks where the name matches this prefix. If unspecified, no task name filtering is done. (optional)
     * @param state OPTIONAL. Filter tasks by state. If unspecified, no task state filtering is done. (optional)
     * @param tagKey OPTIONAL. Provide key tag to filter. The field tag_key is an array of key values, and will be zipped with an optional tag_value array. So the query: &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1&amp;tag_value&#x3D;bar1&amp;tag_key&#x3D;foo2&amp;tag_value&#x3D;bar2 &#x60;&#x60;&#x60; Should be constructed into the structure { \&quot;foo1\&quot; : \&quot;bar1\&quot;, \&quot;foo2\&quot; : \&quot;bar2\&quot;}  &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1 &#x60;&#x60;&#x60; Should be constructed into the structure {\&quot;foo1\&quot; : \&quot;\&quot;}  If the tag_value is empty, it will be treated as matching any possible value. If a tag value is provided, both the tag&#x27;s key and value must be exact matches for a task to be returned. Filter                            Tags                          Match? ---------------------------------------------------------------------- {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bat\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;\&quot;}                   Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;\&quot;}                       {}                            No (optional)
     * @param tagValue OPTIONAL. The companion value field for tag_key (optional)
     * @param pageSize Optional number of tasks to return in one page. Must be less than 2048. Defaults to 256. (optional)
     * @param pageToken OPTIONAL. Page token is used to retrieve the next page of results. If unspecified, returns the first page of results. The value can be found in the &#x60;next_page_token&#x60; field of the last returned result of ListTasks (optional)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @return TesListTasksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TesListTasksResponse listTasks(String namePrefix, TesState state, List<String> tagKey, List<String> tagValue, Integer pageSize, String pageToken, String view) throws ApiException {
        ApiResponse<TesListTasksResponse> resp = listTasksWithHttpInfo(namePrefix, state, tagKey, tagValue, pageSize, pageToken, view);
        return resp.getData();
    }

    /**
     * ListTasks
     * List tasks tracked by the TES server. This includes queued, active and completed tasks. How long completed tasks are stored by the system may be dependent on the underlying implementation.
     * @param namePrefix OPTIONAL. Filter the list to include tasks where the name matches this prefix. If unspecified, no task name filtering is done. (optional)
     * @param state OPTIONAL. Filter tasks by state. If unspecified, no task state filtering is done. (optional)
     * @param tagKey OPTIONAL. Provide key tag to filter. The field tag_key is an array of key values, and will be zipped with an optional tag_value array. So the query: &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1&amp;tag_value&#x3D;bar1&amp;tag_key&#x3D;foo2&amp;tag_value&#x3D;bar2 &#x60;&#x60;&#x60; Should be constructed into the structure { \&quot;foo1\&quot; : \&quot;bar1\&quot;, \&quot;foo2\&quot; : \&quot;bar2\&quot;}  &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1 &#x60;&#x60;&#x60; Should be constructed into the structure {\&quot;foo1\&quot; : \&quot;\&quot;}  If the tag_value is empty, it will be treated as matching any possible value. If a tag value is provided, both the tag&#x27;s key and value must be exact matches for a task to be returned. Filter                            Tags                          Match? ---------------------------------------------------------------------- {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bat\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;\&quot;}                   Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;\&quot;}                       {}                            No (optional)
     * @param tagValue OPTIONAL. The companion value field for tag_key (optional)
     * @param pageSize Optional number of tasks to return in one page. Must be less than 2048. Defaults to 256. (optional)
     * @param pageToken OPTIONAL. Page token is used to retrieve the next page of results. If unspecified, returns the first page of results. The value can be found in the &#x60;next_page_token&#x60; field of the last returned result of ListTasks (optional)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @return ApiResponse&lt;TesListTasksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TesListTasksResponse> listTasksWithHttpInfo(String namePrefix, TesState state, List<String> tagKey, List<String> tagValue, Integer pageSize, String pageToken, String view) throws ApiException {
        com.squareup.okhttp.Call call = listTasksValidateBeforeCall(namePrefix, state, tagKey, tagValue, pageSize, pageToken, view, null, null);
        Type localVarReturnType = new TypeToken<TesListTasksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * ListTasks (asynchronously)
     * List tasks tracked by the TES server. This includes queued, active and completed tasks. How long completed tasks are stored by the system may be dependent on the underlying implementation.
     * @param namePrefix OPTIONAL. Filter the list to include tasks where the name matches this prefix. If unspecified, no task name filtering is done. (optional)
     * @param state OPTIONAL. Filter tasks by state. If unspecified, no task state filtering is done. (optional)
     * @param tagKey OPTIONAL. Provide key tag to filter. The field tag_key is an array of key values, and will be zipped with an optional tag_value array. So the query: &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1&amp;tag_value&#x3D;bar1&amp;tag_key&#x3D;foo2&amp;tag_value&#x3D;bar2 &#x60;&#x60;&#x60; Should be constructed into the structure { \&quot;foo1\&quot; : \&quot;bar1\&quot;, \&quot;foo2\&quot; : \&quot;bar2\&quot;}  &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1 &#x60;&#x60;&#x60; Should be constructed into the structure {\&quot;foo1\&quot; : \&quot;\&quot;}  If the tag_value is empty, it will be treated as matching any possible value. If a tag value is provided, both the tag&#x27;s key and value must be exact matches for a task to be returned. Filter                            Tags                          Match? ---------------------------------------------------------------------- {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bat\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;\&quot;}                   Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;\&quot;}                       {}                            No (optional)
     * @param tagValue OPTIONAL. The companion value field for tag_key (optional)
     * @param pageSize Optional number of tasks to return in one page. Must be less than 2048. Defaults to 256. (optional)
     * @param pageToken OPTIONAL. Page token is used to retrieve the next page of results. If unspecified, returns the first page of results. The value can be found in the &#x60;next_page_token&#x60; field of the last returned result of ListTasks (optional)
     * @param view OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields. (optional, default to MINIMAL)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTasksAsync(String namePrefix, TesState state, List<String> tagKey, List<String> tagValue, Integer pageSize, String pageToken, String view, final ApiCallback<TesListTasksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTasksValidateBeforeCall(namePrefix, state, tagKey, tagValue, pageSize, pageToken, view, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TesListTasksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
